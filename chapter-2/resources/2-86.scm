(load "section-2-5-2.scm")

(define (install-rectangular-package)
  ;; internal procedures
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (gen-sqrt (add (gen-square (real-part z))
               (gen-square (imag-part z)))))
  (define (angle z)
    (gen-atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a) 
    (cons (mul r (gen-cos a)) (mul r (gen-sin a))))

  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (install-polar-package)
  ;; internal procedures
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z)
    (mul (magnitude z) (gen-cos (angle z))))
  (define (imag-part z)
    (mul (magnitude z) (gen-sin (angle z))))
  (define (make-from-real-imag x y) 
    (cons (gen-sqrt (add (gen-square x) (gen-square y)))
          (gen-atan y x)))

  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2))
                         (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (sub (real-part z1) (real-part z2))
                         (sub (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (mul (magnitude z1) (magnitude z2))
                       (add (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (div (magnitude z1) (magnitude z2))
                       (sub (angle z1) (angle z2))))

  ;; interface to rest of the system
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'higher? 'complex (lambda (x) #f))
  'done)

(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (define (scheme-number->complex n)
    (make-complex-from-real-imag n 0))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  (put 'gen-sin '(scheme-number) (lambda (x) (tag (sin x))))
  (put 'gen-cos '(scheme-number) (lambda (x) (tag (cos x))))
  (put 'gen-atan '(scheme-number) (lambda (x) (tag (atan x))))
  (put 'gen-square '(scheme-number) (lambda (x) (tag (square x))))
  (put 'gen-sqrt '(scheme-number) (lambda (x) (tag (sqrt x))))
  (put 'higher? 'scheme-number 
    (lambda (x) (or (eq? x 'complex) ((get 'higher? 'complex) x))))
  (put 'raise '(scheme-number) scheme-number->complex)
  'done)

(define (install-rational-package)
  ;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (rational->scheme-number rat)
    (make-scheme-number (/ (numer rat) (denom rat))))
  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))

  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'gen-sin '(rational) (lambda (x) (make-scheme-number (sin (/ (numer x) (denom x))))))
  (put 'gen-cos '(rational) (lambda (x) (make-scheme-number (cos (/ (numer x) (denom x))))))
  (put 'gen-atan '(rational) (lambda (x) (make-scheme-number (atan (/ (numer x) (denom x))))))
  (put 'gen-square '(rational) (lambda (x) (tag (mul-rat x x))))
  (put 'gen-sqrt '(rational) (lambda (x) (make-scheme-number (sqrt (/ (numer x) (denom x))))))
  (put 'higher? 'rational 
    (lambda (x) (or (eq? x 'scheme-number) ((get 'higher? 'scheme-number) x))))
  (put 'raise '(rational) rational->scheme-number)
  'done)

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (cond ((higher? type1 type2) (apply-generic op a1 (raise a2)))
                      ((higher? type2 type1) (apply-generic op (raise a1) a2))
                      (else (error "No method for these types" (list op type-tags)))))
              (error "No method for these types" (list op type-tags)))))))

(define (raise x) (apply-generic 'raise x))
(define (higher? type1 type2)
  ((get 'higher? type2) type1))
(define (gen-sin x) (apply-generic 'gen-sin x))
(define (gen-cos x) (apply-generic 'gen-cos x))
(define (gen-atan x) (apply-generic 'gen-atan x))
(define (gen-square x) (apply-generic 'gen-square x))
(define (gen-sqrt x) (apply-generic 'gen-sqrt x))

(install-rectangular-package)
(install-polar-package)
(install-complex-package)
(install-rational-package)
(install-scheme-number-package)

(define complex1 (make-complex-from-real-imag (make-rational 4 5) (make-rational 1 3)))
complex1
;Value: (complex rectangular (rational 4 . 5) rational 1 . 3)

(define complex2 (make-complex-from-mag-ang (make-rational 3 2) (make-rational 7 9)))
complex2
;Value: (complex polar (rational 3 . 2) rational 7 . 9)

(add complex1 complex2)
;Value: (complex rectangular (scheme-number . 1.8687119368076284) scheme-number . 1.3858801475534361)