; deque will require a doubly-linked list
; defining node structure for double-linked list
(define (make-node value prev next)
  (list value prev next))
(define (node-value node)
  (car node))
(define (node-prev node)
  (cadr node))
(define (node-next node)
  (caddr node))
(define (set-prev! node prev)
  (set-car! (cdr node) prev))
(define (set-next! node next)
  (set-car! (cddr node) next))

(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))

(define (empty-deque? deque) (null? (front-ptr deque)))
(define (make-deque) (cons '() '()))

(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (node-value (front-ptr deque))))

(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "REAR called with an empty deque" deque)
      (node-value (rear-ptr deque))))

(define (front-insert-deque! deque item)
  (let ((new-node (make-node item 
                             '() 
                             (if (empty-deque? deque)
                                 '()
                                 (front-ptr deque)))))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-node)
           (set-rear-ptr! deque new-node)
           (deque-values deque))
          (else
           (set-prev! (front-ptr deque) new-node)
           (set-front-ptr! deque new-node)
           (deque-values deque))))) 

(define (rear-insert-deque! deque item)
  (let ((new-node (make-node item
                             (if (empty-deque? deque)
                                 '()
                                 (rear-ptr deque))
                             '())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-node)
           (set-rear-ptr! deque new-node)
           (deque-values deque))
          (else
           (set-next! (rear-ptr deque) new-node)
           (set-rear-ptr! deque new-node)
           (deque-values deque))))) 

(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "FRONT-DELETE! called with an empty deque" deque))
        (else
         (set-front-ptr! deque (node-next (front-ptr deque)))
         (if (null? (front-ptr deque))
             (set-rear-ptr! deque (front-ptr deque))
             (set-prev! (front-ptr deque) '()))
         (deque-values deque))))

(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "REAR-DELETE! called with an empty deque" deque))
        (else
         (set-rear-ptr! deque (node-prev (rear-ptr deque)))
         (if (null? (rear-ptr deque))
             (set-front-ptr! deque (rear-ptr deque))
             (set-next! (rear-ptr deque) '()))
         (deque-values deque)))) 

(define (deque-values deque) 
  (node-values (front-ptr deque)))

(define (node-values node)
  (if (null? node) 
      '()
      (cons (node-value node) 
            (node-values (node-next node)))))

(define q1 (make-deque))
(front-insert-deque! q1 'b)
;Value: (b)
(rear-insert-deque! q1 'c)
;Value: (b c)
(front-insert-deque! q1 'a)
;Value: (a b c)
(rear-insert-deque! q1 'd)
;Value: (a b c d)
(front-delete-deque! q1)
;Value: (b c d)
(front-delete-deque! q1)
;Value: (c d)
(rear-delete-deque! q1)
;Value: (c)
(rear-delete-deque! q1)
;Value: ()